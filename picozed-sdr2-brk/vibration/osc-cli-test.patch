Allow osc to run tests in a sane fashion in a terminal environment using Xvfb.
Now popups messages should sent back to the shell instead of using popup
dialogs.

This is triggered by using the '-n' option on the command line.

--- a/dialogs.c
+++ b/dialogs.c
@@ -52,6 +52,7 @@ static GtkWidget *fru_date;
 static GtkWidget *fru_file_list;
 static volatile bool ver_check_done;
 static Release *release;
+extern bool non_blocking_cli_testing;
 
 #ifdef FRU_FILES
 static time_t mins_since_jan_1_1996(void)
@@ -610,14 +611,19 @@ gint create_blocking_popup(GtkMessageType type, GtkButtonsType button,
 	if (len < 0)
 		return -1;
 
-	dialog = gtk_message_dialog_new(NULL,
-			GTK_DIALOG_MODAL,
-			type,
-			button,
-			buf, NULL);
-	gtk_window_set_title(GTK_WINDOW(dialog), title);
-	run = gtk_dialog_run(GTK_DIALOG(dialog));
-	gtk_widget_destroy(dialog);
+	if (non_blocking_cli_testing) {
+		puts(buf);
+		run = 0;
+	} else {
+		dialog = gtk_message_dialog_new(NULL,
+				GTK_DIALOG_MODAL,
+				type,
+				button,
+				buf, NULL);
+		gtk_window_set_title(GTK_WINDOW(dialog), title);
+		run = gtk_dialog_run(GTK_DIALOG(dialog));
+		gtk_widget_destroy(dialog);
+	}
 
 	return run;
 }
--- a/osc.c
+++ b/osc.c
@@ -60,7 +60,7 @@ static void plugin_restore_ini_state(const char *plugin_name,
 static void plot_init(GtkWidget *plot);
 static void plot_destroyed_cb(OscPlot *plot);
 static void capture_profile_save(const char *filename);
-static void load_profile(const char *filename, bool load_plugins);
+static int load_profile(const char *filename, bool load_plugins);
 static int capture_setup(void);
 static void capture_start(void);
 static void stop_sampling(void);
@@ -1739,24 +1739,26 @@ bool check_inifile(const char *filepath)
 
 int load_default_profile(char *filename, bool load_plugins)
 {
+	int ret = 0;
+
 	/* Don't load anything */
 	if (filename && !strcmp(filename, "-"))
 		return 0;
 
 	if (filename && check_inifile(filename)) {
-		load_profile(filename, load_plugins);
+		ret = load_profile(filename, load_plugins);
 	} else {
 		gchar *path = get_default_profile_name();
 
 		/* if this is bad, we don't load anything and
 		 * return success, so we still run */
 		if (check_inifile(path))
-			load_profile(path, load_plugins);
+			ret = load_profile(path, load_plugins);
 
 		g_free(path);
 	}
 
-	return 0;
+	return ret;
 }
 
 static void plugins_get_preferred_size(GSList *plist, int *width, int *height)
@@ -2014,11 +2016,11 @@ static int load_profile_sequential_handler(int line, const char *section,
 	return 1;
 }
 
-static void load_profile_sequential(const char *filename)
+static int load_profile_sequential(const char *filename)
 {
 	gchar *new_filename;
 	char buf[32];
-	int ret;
+	int ret = 0;
 
 	snprintf(buf, sizeof(buf), "osc_%u.ini", getpid());
 
@@ -2046,10 +2048,13 @@ static void load_profile_sequential(const char *filename)
 err_unlink:
 	unlink(new_filename);
 	g_free(new_filename);
+
+	return ret;
 }
 
-static void load_profile(const char *filename, bool load_plugins)
+static int load_profile(const char *filename, bool load_plugins)
 {
+	int ret = 0;
 	GSList *node;
 	gint x_pos = 0, y_pos = 0;
 	char *value;
@@ -2070,8 +2075,8 @@ static void load_profile(const char *filename, bool load_plugins)
 	value = read_token_from_ini(filename, OSC_INI_SECTION, "test");
 	if (value) {
 		free(value);
-		load_profile_sequential(filename);
-		return;
+		ret = load_profile_sequential(filename);
+		return ret;
 	}
 
 	value = read_token_from_ini(filename,
@@ -2121,6 +2126,8 @@ static void load_profile(const char *filename, bool load_plugins)
 		plugin_restore_ini_state(plugin->name, "detached", !!atoi(value));
 		free(value);
 	}
+
+	return ret;
 }
 
 void load_complete_profile(const char *filename)
@@ -2251,13 +2258,15 @@ int osc_test_value(struct iio_context *ctx, int line,
 		goto cleanup;
 	}
 
-	if (ret < 0)
-		fprintf(stderr, "Unable to test \"%s\": %s\n",
+	if (ret < 0) {
+		fprintf(stdout, "Unable to test \"%s\": %s\n",
 				attribute, strerror(-ret));
-	else if (ret == 0)
-		fprintf(stderr, "*** Test failed! ***\n");
-	else
-		fprintf(stderr, "Test passed.\n");
+	} else if (ret == 0) {
+		ret = -1;
+		fprintf(stdout, "*** Test failed! ***\n");
+	} else {
+		fprintf(stdout, "Test passed.\n");
+	}
 
 	g_strfreev(elems);
 	return ret;
@@ -2269,7 +2278,7 @@ err_popup:
 			"INI parsing failure",
 			"Unable to parse line: %i\n\n%s = %lli %lli\n",
 			line, attribute, min_i, max_i);
-	fprintf(stderr, "Unable to parse line: %i: %s = %lli %lli\n",
+	fprintf(stdout, "Unable to parse line: %i: %s = %lli %lli\n",
 			line, attribute, min_i, max_i);
 	return ret;
 }
@@ -2463,7 +2472,7 @@ int osc_log_value(struct iio_context *ctx,
 	return 0;
 
 err_ret:
-	fprintf(stderr, "Unable to log \"%s\": %s\n",
+	fprintf(stdout, "Unable to log \"%s\": %s\n",
 			attribute, strerror(-ret));
 	return ret;
 }
@@ -2491,7 +2500,7 @@ int osc_plugin_default_handle(struct iio_context *ctx,
 		if (driver_handle)
 			return driver_handle(attrib, value);
 		else {
-			fprintf(stderr, "Error parsing ini file; key:'%s' value:'%s'\n",
+			fprintf(stdout, "Error parsing ini file; key:'%s' value:'%s'\n",
 					attrib, value);
 			return ret;
 		}
@@ -2501,7 +2510,7 @@ int osc_plugin_default_handle(struct iio_context *ctx,
 		long long lval;
 		ret = osc_read_value(ctx, value, &lval);
 		if (ret < 0) {
-			fprintf(stderr, "Unable to read value: %s\n", value);
+			fprintf(stdout, "Unable to read value: %s\n", value);
 			return ret;
 		}
 
@@ -2519,7 +2528,7 @@ int osc_plugin_default_handle(struct iio_context *ctx,
 		ret = iio_device_attr_write(dev, attr, value);
 
 	if (ret < 0) {
-		fprintf(stderr, "Unable to write '%s' to %s:%s\n", value,
+		fprintf(stdout, "Unable to write '%s' to %s:%s\n", value,
 				chn ? iio_channel_get_name(chn) : iio_device_get_name(dev),
 				attr);
 	}
--- a/oscmain.c
+++ b/oscmain.c
@@ -15,6 +15,7 @@ extern GtkWidget *versioncheck_en;
 extern GtkWidget *main_window;
 extern struct iio_context *ctx;
 extern bool ctx_destroyed_by_do_quit;
+bool non_blocking_cli_testing = false;
 
 extern void version_check_start(void *_dialogs);
 
@@ -168,6 +169,7 @@ static void usage(char *program)
 	/* please keep this list sorted in alphabetical order */
 	printf( "Command line options:\n"
 		"\t-p\tload specific profile\n"
+		"\t-n\trun tests in non-blocking command-line mode\n"
 		"\t-c\tIP address of device to connect to\n");
 
 	printf("\nEnvironmental variables:\n"
@@ -188,7 +190,7 @@ gint main (int argc, char **argv)
 	char *profile = NULL;
 
 	opterr = 0;
-	while ((c = getopt (argc, argv, "c:p:")) != -1)
+	while ((c = getopt (argc, argv, "c:np:")) != -1)
 		switch (c) {
 			case 'c':
 				ctx = iio_create_network_context(optarg);
@@ -197,6 +199,9 @@ gint main (int argc, char **argv)
 					exit(-1);
 				}
 				break;
+			case 'n':
+				non_blocking_cli_testing = true;
+				break;
 			case 'p':
 				profile = strdup(optarg);
 				break;
--- a/oscplot.c
+++ b/oscplot.c
@@ -3105,7 +3105,7 @@ static void fps_counter(OscPlotPrivate *priv)
 	priv->frame_counter++;
 	t = time(NULL);
 	if (t - priv->last_update >= 10) {
-		printf("FPS: %d\n", priv->frame_counter / 10);
+		/*printf("FPS: %d\n", priv->frame_counter / 10);*/
 		priv->frame_counter = 0;
 		priv->last_update = t;
 	}
